# NOTE: This file is auto generated by OpenAPI Generator 7.13.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule DcApiEx.Api.Work do
  @moduledoc """
  API calls for all endpoints tagged `Work`.
  """

  alias DcApiEx.Connection
  import DcApiEx.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (DcApiEx.Connection): Connection to server
  - `id` (String.t): Collection, FileSet, or Work ID
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page number of results to retrieve
    - `:size` (integer()): Maximum number of results per page
    - `:sort` (String.t): Comma-delimited list of fields to sort search results (e.g. \"create_date:asc,modified_date:desc\")
    - `:as` (String.t): Desired output format

  ### Returns

  - `{:ok, DcApiEx.Model.GetCollections200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_similar_works(Tesla.Env.client, String.t, keyword()) :: {:ok, DcApiEx.Model.GetCollections200Response.t} | {:error, Tesla.Env.t}
  def get_similar_works(connection, id, opts \\ []) do
    optional_params = %{
      :page => :query,
      :size => :query,
      :sort => :query,
      :as => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/works/#{id}/similar")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, DcApiEx.Model.GetCollections200Response}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (DcApiEx.Connection): Connection to server
  - `id` (String.t): Collection, FileSet, or Work ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, DcApiEx.Model.GetCollectionById200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_work_by_id(Tesla.Env.client, String.t, keyword()) :: {:ok, DcApiEx.Model.GetCollectionById200Response.t} | {:error, Tesla.Env.t}
  def get_work_by_id(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/works/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, DcApiEx.Model.GetCollectionById200Response}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (DcApiEx.Connection): Connection to server
  - `id` (String.t): Collection, FileSet, or Work ID
  - `opts` (keyword): Optional parameters
    - `:aspect` (String.t): Desired aspect ratio
    - `:size` (integer()): Size of largest dimension

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_work_thumbnail(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_work_thumbnail(connection, id, opts \\ []) do
    optional_params = %{
      :aspect => :query,
      :size => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/works/#{id}/thumbnail")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end
end
