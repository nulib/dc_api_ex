# NOTE: This file is auto generated by OpenAPI Generator 7.13.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule DcApiEx.Api.Authentication do
  @moduledoc """
  API calls for all endpoints tagged `Authentication`.
  """

  alias DcApiEx.Connection
  import DcApiEx.RequestBuilder

  @doc """
  Initiate a user login

  ### Parameters

  - `connection` (DcApiEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:goto` (String.t): URL to redirect to after login

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_auth_login(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_auth_login(connection, opts \\ []) do
    optional_params = %{
      :goto => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/auth/login")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {302, false}
    ])
  end

  @doc """
  Obtain a bearer auth token for the logged in user

  ### Parameters

  - `connection` (DcApiEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:ttl` (float()): TTL in seconds for the token expiration

  ### Returns

  - `{:ok, DcApiEx.Model.GetAuthToken200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_auth_token(Tesla.Env.client, keyword()) :: {:ok, DcApiEx.Model.GetAuthToken200Response.t} | {:error, Tesla.Env.t}
  def get_auth_token(connection, opts \\ []) do
    optional_params = %{
      :ttl => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/auth/token")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, DcApiEx.Model.GetAuthToken200Response}
    ])
  end

  @doc """
  Obtain information about the logged in user

  ### Parameters

  - `connection` (DcApiEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_auth_whoami(Tesla.Env.client, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def get_auth_whoami(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/auth/whoami")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}}
    ])
  end
end
