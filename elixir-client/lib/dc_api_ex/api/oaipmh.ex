# NOTE: This file is auto generated by OpenAPI Generator 7.13.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule DcApiEx.Api.OAIPMH do
  @moduledoc """
  API calls for all endpoints tagged `OAIPMH`.
  """

  alias DcApiEx.Connection
  import DcApiEx.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (DcApiEx.Connection): Connection to server
  - `verb` (String.t): All OAI-PMH verbs are supported.
  - `opts` (keyword): Optional parameters
    - `:identifier` (String.t): Required for `GetRecord` requests
    - `:metadataPrefix` (String.t): Required for `ListIdentifiers`, `ListRecords`, and `GetRecord` requests
    - `:from` (String.t): Optional for `ListRecords` and `ListIdentifiers` requests, based on a record's modified date. Required format `YYYY:MM:DDThh:mm:ss.ffffffZ`
    - `:until` (String.t): Optional for `ListRecords` and `ListIdentifiers` requests, based on a record's modified date. Required format `YYYY:MM:DDThh:mm:ss.ffffffZ`
    - `:set` (String.t): Optional for `ListRecords` and `ListIdentifiers` requests, based on a collection id.
    - `:resumptionToken` (String.t): Exclusive parameter for retrieving additional results

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec oai_get(Tesla.Env.client, String.t, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def oai_get(connection, verb, opts \\ []) do
    optional_params = %{
      :identifier => :query,
      :metadataPrefix => :query,
      :from => :query,
      :until => :query,
      :set => :query,
      :resumptionToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/oai")
      |> add_param(:query, :verb, verb)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (DcApiEx.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:verb` (String.t): All OAI-PMH verbs are supported
    - `:identifier` (String.t): Required for `GetRecord` requests
    - `:metadataPrefix` (String.t): Required for `ListIdentifiers`, `ListRecords`, and `GetRecord` requests. The only supported value is `\\\"oai_dc\\\"` currently.
    - `:resumptionToken` (String.t): Exclusive parameter for retrieving additional results
    - `:from` (String.t): Optional for `ListRecords` and `ListIdentifiers` requests, based on a record's modified date. Required format `YYYY:MM:DDThh:mm:ss.ffffffZ`
    - `:until` (String.t): Optional for `ListRecords` and `ListIdentifiers` requests, based on a record's modified date. Required format `YYYY:MM:DDThh:mm:ss.ffffffZ`
    - `:set` (String.t): Optional for `ListRecords` and `ListIdentifiers` requests, based on a collection id.

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec oai_post(Tesla.Env.client, keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def oai_post(connection, opts \\ []) do
    optional_params = %{
      :verb => :form,
      :identifier => :form,
      :metadataPrefix => :form,
      :resumptionToken => :form,
      :from => :form,
      :until => :form,
      :set => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/oai")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}}
    ])
  end
end
